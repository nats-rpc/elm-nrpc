{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}

module Proto.Nrpc.Internals_ exposing (..)

{-| 
This file was automatically generated by
- [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 3.2.0
- `protoc` 4.22.2
- the following specification files: `nrpc/nrpc.proto`

To run it, add a dependency via `elm install` on [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.2.0) version latest or higher.


-}

import Protobuf.Decode
import Protobuf.Encode


{-| The field numbers for the fields of `Proto__Nrpc__HeartBeat`. This is mostly useful for internals, like documentation generation.


-}
fieldNumbersProto__Nrpc__HeartBeat : { lastbeat : Int }
fieldNumbersProto__Nrpc__HeartBeat =
    { lastbeat = 1 }


{-| Default for Proto__Nrpc__HeartBeat. Should only be used for 'required' decoders as an initial value.


-}
defaultProto__Nrpc__HeartBeat : Proto__Nrpc__HeartBeat
defaultProto__Nrpc__HeartBeat =
    { lastbeat = False }


{-| Declares how to decode a `Proto__Nrpc__HeartBeat` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.


-}
decodeProto__Nrpc__HeartBeat : Protobuf.Decode.Decoder Proto__Nrpc__HeartBeat
decodeProto__Nrpc__HeartBeat =
    Protobuf.Decode.message
        defaultProto__Nrpc__HeartBeat
        [ Protobuf.Decode.optional 1 Protobuf.Decode.bool (\a r -> { r | lastbeat = a }) ]


{-| Declares how to encode a `Proto__Nrpc__HeartBeat` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.


-}
encodeProto__Nrpc__HeartBeat : Proto__Nrpc__HeartBeat -> Protobuf.Encode.Encoder
encodeProto__Nrpc__HeartBeat value =
    Protobuf.Encode.message [ ( 1, Protobuf.Encode.bool value.lastbeat ) ]


{-| `Proto__Nrpc__HeartBeat` message


-}
type alias Proto__Nrpc__HeartBeat =
    { lastbeat : Bool }


{-| The field numbers for the fields of `Proto__Nrpc__NoReply`. This is mostly useful for internals, like documentation generation.


-}
fieldNumbersProto__Nrpc__NoReply : {}
fieldNumbersProto__Nrpc__NoReply =
    {}


{-| Default for Proto__Nrpc__NoReply. Should only be used for 'required' decoders as an initial value.


-}
defaultProto__Nrpc__NoReply : Proto__Nrpc__NoReply
defaultProto__Nrpc__NoReply =
    {}


{-| Declares how to decode a `Proto__Nrpc__NoReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.


-}
decodeProto__Nrpc__NoReply : Protobuf.Decode.Decoder Proto__Nrpc__NoReply
decodeProto__Nrpc__NoReply =
    Protobuf.Decode.message defaultProto__Nrpc__NoReply []


{-| Declares how to encode a `Proto__Nrpc__NoReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.


-}
encodeProto__Nrpc__NoReply : Proto__Nrpc__NoReply -> Protobuf.Encode.Encoder
encodeProto__Nrpc__NoReply _ =
    Protobuf.Encode.message []


{-| `Proto__Nrpc__NoReply` message


-}
type alias Proto__Nrpc__NoReply =
    {}


{-| The field numbers for the fields of `Proto__Nrpc__NoRequest`. This is mostly useful for internals, like documentation generation.


-}
fieldNumbersProto__Nrpc__NoRequest : {}
fieldNumbersProto__Nrpc__NoRequest =
    {}


{-| Default for Proto__Nrpc__NoRequest. Should only be used for 'required' decoders as an initial value.


-}
defaultProto__Nrpc__NoRequest : Proto__Nrpc__NoRequest
defaultProto__Nrpc__NoRequest =
    {}


{-| Declares how to decode a `Proto__Nrpc__NoRequest` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.


-}
decodeProto__Nrpc__NoRequest : Protobuf.Decode.Decoder Proto__Nrpc__NoRequest
decodeProto__Nrpc__NoRequest =
    Protobuf.Decode.message defaultProto__Nrpc__NoRequest []


{-| Declares how to encode a `Proto__Nrpc__NoRequest` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.


-}
encodeProto__Nrpc__NoRequest : Proto__Nrpc__NoRequest -> Protobuf.Encode.Encoder
encodeProto__Nrpc__NoRequest _ =
    Protobuf.Encode.message []


{-| `Proto__Nrpc__NoRequest` message


-}
type alias Proto__Nrpc__NoRequest =
    {}


{-| The field numbers for the fields of `Proto__Nrpc__Void`. This is mostly useful for internals, like documentation generation.


-}
fieldNumbersProto__Nrpc__Void : {}
fieldNumbersProto__Nrpc__Void =
    {}


{-| Default for Proto__Nrpc__Void. Should only be used for 'required' decoders as an initial value.


-}
defaultProto__Nrpc__Void : Proto__Nrpc__Void
defaultProto__Nrpc__Void =
    {}


{-| Declares how to decode a `Proto__Nrpc__Void` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.


-}
decodeProto__Nrpc__Void : Protobuf.Decode.Decoder Proto__Nrpc__Void
decodeProto__Nrpc__Void =
    Protobuf.Decode.message defaultProto__Nrpc__Void []


{-| Declares how to encode a `Proto__Nrpc__Void` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.


-}
encodeProto__Nrpc__Void : Proto__Nrpc__Void -> Protobuf.Encode.Encoder
encodeProto__Nrpc__Void _ =
    Protobuf.Encode.message []


{-| `Proto__Nrpc__Void` message


-}
type alias Proto__Nrpc__Void =
    {}


{-| The field numbers for the fields of `Proto__Nrpc__Error`. This is mostly useful for internals, like documentation generation.


-}
fieldNumbersProto__Nrpc__Error : { type_ : Int, message : Int, msgCount : Int }
fieldNumbersProto__Nrpc__Error =
    { type_ = 1, message = 2, msgCount = 3 }


{-| Default for Proto__Nrpc__Error. Should only be used for 'required' decoders as an initial value.


-}
defaultProto__Nrpc__Error : Proto__Nrpc__Error
defaultProto__Nrpc__Error =
    { type_ = defaultProto__Nrpc__Error__Type, message = "", msgCount = 0 }


{-| Declares how to decode a `Proto__Nrpc__Error` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.


-}
decodeProto__Nrpc__Error : Protobuf.Decode.Decoder Proto__Nrpc__Error
decodeProto__Nrpc__Error =
    Protobuf.Decode.message
        defaultProto__Nrpc__Error
        [ Protobuf.Decode.optional 1 decodeProto__Nrpc__Error__Type (\a r -> { r | type_ = a })
        , Protobuf.Decode.optional 2 Protobuf.Decode.string (\a r -> { r | message = a })
        , Protobuf.Decode.optional 3 Protobuf.Decode.uint32 (\a r -> { r | msgCount = a })
        ]


{-| Declares how to encode a `Proto__Nrpc__Error` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.


-}
encodeProto__Nrpc__Error : Proto__Nrpc__Error -> Protobuf.Encode.Encoder
encodeProto__Nrpc__Error value =
    Protobuf.Encode.message
        [ ( 1, encodeProto__Nrpc__Error__Type value.type_ )
        , ( 2, Protobuf.Encode.string value.message )
        , ( 3, Protobuf.Encode.uint32 value.msgCount )
        ]


{-| `Proto__Nrpc__Error` message


-}
type alias Proto__Nrpc__Error =
    { type_ : Proto__Nrpc__Error__Type, message : String, msgCount : Int }


{-| Default for Proto__Nrpc__Error__Type. Should only be used for 'required' decoders as an initial value.


-}
defaultProto__Nrpc__Error__Type : Proto__Nrpc__Error__Type
defaultProto__Nrpc__Error__Type =
    Proto__Nrpc__Error__CLIENT


{-| Declares how to encode a `Proto__Nrpc__Error__Type` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.


-}
encodeProto__Nrpc__Error__Type : Proto__Nrpc__Error__Type -> Protobuf.Encode.Encoder
encodeProto__Nrpc__Error__Type value =
    Protobuf.Encode.int32 <|
        case value of
            Proto__Nrpc__Error__CLIENT ->
                0

            Proto__Nrpc__Error__SERVER ->
                1

            Proto__Nrpc__Error__EOS ->
                3

            Proto__Nrpc__Error__SERVERTOOBUSY ->
                4

            Proto__Nrpc__Error__TypeUnrecognized_ i ->
                i


{-| Declares how to decode a `Proto__Nrpc__Error__Type` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.


-}
decodeProto__Nrpc__Error__Type : Protobuf.Decode.Decoder Proto__Nrpc__Error__Type
decodeProto__Nrpc__Error__Type =
    Protobuf.Decode.int32
        |> Protobuf.Decode.map
            (\i ->
                case i of
                    0 ->
                        Proto__Nrpc__Error__CLIENT

                    1 ->
                        Proto__Nrpc__Error__SERVER

                    3 ->
                        Proto__Nrpc__Error__EOS

                    4 ->
                        Proto__Nrpc__Error__SERVERTOOBUSY

                    _ ->
                        Proto__Nrpc__Error__TypeUnrecognized_ i
            )


{-| `Proto__Nrpc__Error__Type` enumeration


-}
type Proto__Nrpc__Error__Type
    = Proto__Nrpc__Error__CLIENT
    | Proto__Nrpc__Error__SERVER
    | Proto__Nrpc__Error__EOS
    | Proto__Nrpc__Error__SERVERTOOBUSY
    | Proto__Nrpc__Error__TypeUnrecognized_ Int


{-| Default for Proto__Nrpc__SubjectRule. Should only be used for 'required' decoders as an initial value.


-}
defaultProto__Nrpc__SubjectRule : Proto__Nrpc__SubjectRule
defaultProto__Nrpc__SubjectRule =
    Proto__Nrpc__COPY


{-| Declares how to encode a `Proto__Nrpc__SubjectRule` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.


-}
encodeProto__Nrpc__SubjectRule : Proto__Nrpc__SubjectRule -> Protobuf.Encode.Encoder
encodeProto__Nrpc__SubjectRule value =
    Protobuf.Encode.int32 <|
        case value of
            Proto__Nrpc__COPY ->
                0

            Proto__Nrpc__TOLOWER ->
                1

            Proto__Nrpc__SubjectRuleUnrecognized_ i ->
                i


{-| Declares how to decode a `Proto__Nrpc__SubjectRule` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.


-}
decodeProto__Nrpc__SubjectRule : Protobuf.Decode.Decoder Proto__Nrpc__SubjectRule
decodeProto__Nrpc__SubjectRule =
    Protobuf.Decode.int32
        |> Protobuf.Decode.map
            (\i ->
                case i of
                    0 ->
                        Proto__Nrpc__COPY

                    1 ->
                        Proto__Nrpc__TOLOWER

                    _ ->
                        Proto__Nrpc__SubjectRuleUnrecognized_ i
            )


{-| `Proto__Nrpc__SubjectRule` enumeration


-}
type Proto__Nrpc__SubjectRule
    = Proto__Nrpc__COPY
    | Proto__Nrpc__TOLOWER
    | Proto__Nrpc__SubjectRuleUnrecognized_ Int
