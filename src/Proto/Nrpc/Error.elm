{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}

module Proto.Nrpc.Error exposing (Type(..), decodeType, defaultType, encodeType, fieldNumbersType, fromInternalType, toInternalType)

{-| 
This file was automatically generated by
- [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 3.2.0
- `protoc` 4.22.2
- the following specification files: `nrpc/nrpc.proto`

To run it, add a dependency via `elm install` on [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.2.0) version latest or higher.


@docs Type, decodeType, defaultType, encodeType, fieldNumbersType, fromInternalType, toInternalType
-}

import Proto.Nrpc.Internals_
import Protobuf.Decode
import Protobuf.Encode


{-| The field numbers for the fields of `Type`. This is mostly useful for internals, like documentation generation.


-}
fieldNumbersType : Type -> Int
fieldNumbersType n_ =
    case n_ of
        CLIENT ->
            0

        SERVER ->
            1

        EOS ->
            3

        SERVERTOOBUSY ->
            4

        TypeUnrecognized_ m_ ->
            m_


{-| Default for Type. Should only be used for 'required' decoders as an initial value.


-}
defaultType : Type
defaultType =
    CLIENT


{-| Convert a `Type` into its internal representation `Proto__Nrpc__Error__Type`.


Using two different types is necessary to avoid recursive module references while having readable constructor names.


-}
toInternalType : Type -> Proto.Nrpc.Internals_.Proto__Nrpc__Error__Type
toInternalType data_ =
    case data_ of
        CLIENT ->
            Proto.Nrpc.Internals_.Proto__Nrpc__Error__CLIENT

        SERVER ->
            Proto.Nrpc.Internals_.Proto__Nrpc__Error__SERVER

        EOS ->
            Proto.Nrpc.Internals_.Proto__Nrpc__Error__EOS

        SERVERTOOBUSY ->
            Proto.Nrpc.Internals_.Proto__Nrpc__Error__SERVERTOOBUSY

        TypeUnrecognized_ n_ ->
            Proto.Nrpc.Internals_.Proto__Nrpc__Error__TypeUnrecognized_ n_


{-| Convert the internal type `Proto__Nrpc__Error__Type` into a `Type`.


Using two different types is necessary to avoid recursive module references while having readable constructor names.


-}
fromInternalType : Proto.Nrpc.Internals_.Proto__Nrpc__Error__Type -> Type
fromInternalType data_ =
    case data_ of
        Proto.Nrpc.Internals_.Proto__Nrpc__Error__CLIENT ->
            CLIENT

        Proto.Nrpc.Internals_.Proto__Nrpc__Error__SERVER ->
            SERVER

        Proto.Nrpc.Internals_.Proto__Nrpc__Error__EOS ->
            EOS

        Proto.Nrpc.Internals_.Proto__Nrpc__Error__SERVERTOOBUSY ->
            SERVERTOOBUSY

        Proto.Nrpc.Internals_.Proto__Nrpc__Error__TypeUnrecognized_ n_ ->
            TypeUnrecognized_ n_


{-| Declares how to encode a `Type` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.


-}
encodeType : Type -> Protobuf.Encode.Encoder
encodeType =
    toInternalType >> Proto.Nrpc.Internals_.encodeProto__Nrpc__Error__Type


{-| Declares how to decode a `Type` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.


-}
decodeType : Protobuf.Decode.Decoder Type
decodeType =
    Protobuf.Decode.map fromInternalType Proto.Nrpc.Internals_.decodeProto__Nrpc__Error__Type


{-| `Type` enumeration


-}
type Type
    = CLIENT
    | SERVER
    | EOS
    | SERVERTOOBUSY
    | TypeUnrecognized_ Int
