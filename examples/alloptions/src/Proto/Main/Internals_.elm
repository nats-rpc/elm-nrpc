{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}

module Proto.Main.Internals_ exposing (..)

{-| 
This file was automatically generated by
- [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 3.2.0
- `protoc` 4.22.2
- the following specification files: `alloptions.proto`

To run it, add a dependency via `elm install` on [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.2.0) version latest or higher.


-}

import Protobuf.Decode
import Protobuf.Encode


{-| The field numbers for the fields of `Proto__Main__SimpleStringReply`. This is mostly useful for internals, like documentation generation.


-}
fieldNumbersProto__Main__SimpleStringReply : { reply : Int }
fieldNumbersProto__Main__SimpleStringReply =
    { reply = 1 }


{-| Default for Proto__Main__SimpleStringReply. Should only be used for 'required' decoders as an initial value.


-}
defaultProto__Main__SimpleStringReply : Proto__Main__SimpleStringReply
defaultProto__Main__SimpleStringReply =
    { reply = "" }


{-| Declares how to decode a `Proto__Main__SimpleStringReply` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.


-}
decodeProto__Main__SimpleStringReply : Protobuf.Decode.Decoder Proto__Main__SimpleStringReply
decodeProto__Main__SimpleStringReply =
    Protobuf.Decode.message
        defaultProto__Main__SimpleStringReply
        [ Protobuf.Decode.optional 1 Protobuf.Decode.string (\a r -> { r | reply = a }) ]


{-| Declares how to encode a `Proto__Main__SimpleStringReply` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.


-}
encodeProto__Main__SimpleStringReply : Proto__Main__SimpleStringReply -> Protobuf.Encode.Encoder
encodeProto__Main__SimpleStringReply value =
    Protobuf.Encode.message [ ( 1, Protobuf.Encode.string value.reply ) ]


{-| `Proto__Main__SimpleStringReply` message


-}
type alias Proto__Main__SimpleStringReply =
    { reply : String }


{-| The field numbers for the fields of `Proto__Main__StringArg`. This is mostly useful for internals, like documentation generation.


-}
fieldNumbersProto__Main__StringArg : { arg1 : Int }
fieldNumbersProto__Main__StringArg =
    { arg1 = 1 }


{-| Default for Proto__Main__StringArg. Should only be used for 'required' decoders as an initial value.


-}
defaultProto__Main__StringArg : Proto__Main__StringArg
defaultProto__Main__StringArg =
    { arg1 = "" }


{-| Declares how to decode a `Proto__Main__StringArg` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.


-}
decodeProto__Main__StringArg : Protobuf.Decode.Decoder Proto__Main__StringArg
decodeProto__Main__StringArg =
    Protobuf.Decode.message
        defaultProto__Main__StringArg
        [ Protobuf.Decode.optional 1 Protobuf.Decode.string (\a r -> { r | arg1 = a }) ]


{-| Declares how to encode a `Proto__Main__StringArg` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.


-}
encodeProto__Main__StringArg : Proto__Main__StringArg -> Protobuf.Encode.Encoder
encodeProto__Main__StringArg value =
    Protobuf.Encode.message [ ( 1, Protobuf.Encode.string value.arg1 ) ]


{-| `Proto__Main__StringArg` message


-}
type alias Proto__Main__StringArg =
    { arg1 : String }
